// Code generated by MockGen. DO NOT EDIT.
// Source: ./daemon/internal/nativeops/interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	nativeops "victord/daemon/internal/nativeops"
	types "victord/daemon/platform/types"

	gomock "github.com/golang/mock/gomock"
)

// MockIndexOps is a mock of IndexOps interface.
type MockIndexOps struct {
	ctrl     *gomock.Controller
	recorder *MockIndexOpsMockRecorder
}

// MockIndexOpsMockRecorder is the mock recorder for MockIndexOps.
type MockIndexOpsMockRecorder struct {
	mock *MockIndexOps
}

// NewMockIndexOps creates a new mock instance.
func NewMockIndexOps(ctrl *gomock.Controller) *MockIndexOps {
	mock := &MockIndexOps{ctrl: ctrl}
	mock.recorder = &MockIndexOpsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIndexOps) EXPECT() *MockIndexOpsMockRecorder {
	return m.recorder
}

// AllocIndex mocks base method.
func (m *MockIndexOps) AllocIndex(arg0, arg1 int, arg2 uint16) (nativeops.VectorOps, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocIndex", arg0, arg1, arg2)
	ret0, _ := ret[0].(nativeops.VectorOps)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocIndex indicates an expected call of AllocIndex.
func (mr *MockIndexOpsMockRecorder) AllocIndex(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocIndex", reflect.TypeOf((*MockIndexOps)(nil).AllocIndex), arg0, arg1, arg2)
}

// MockVectorOps is a mock of VectorOps interface.
type MockVectorOps struct {
	ctrl     *gomock.Controller
	recorder *MockVectorOpsMockRecorder
}

// MockVectorOpsMockRecorder is the mock recorder for MockVectorOps.
type MockVectorOpsMockRecorder struct {
	mock *MockVectorOps
}

// NewMockVectorOps creates a new mock instance.
func NewMockVectorOps(ctrl *gomock.Controller) *MockVectorOps {
	mock := &MockVectorOps{ctrl: ctrl}
	mock.recorder = &MockVectorOpsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVectorOps) EXPECT() *MockVectorOpsMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockVectorOps) Delete(arg0 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockVectorOpsMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVectorOps)(nil).Delete), arg0)
}

// Insert mocks base method.
func (m *MockVectorOps) Insert(arg0 uint64, arg1 []float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockVectorOpsMockRecorder) Insert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockVectorOps)(nil).Insert), arg0, arg1)
}

// Search mocks base method.
func (m *MockVectorOps) Search(arg0 []float32, arg1 int) (*types.MatchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0, arg1)
	ret0, _ := ret[0].(*types.MatchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockVectorOpsMockRecorder) Search(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockVectorOps)(nil).Search), arg0, arg1)
}
