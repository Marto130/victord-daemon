// Code generated by MockGen. DO NOT EDIT.
// Source: ./daemon/internal/vector/service/interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	dto "victord/daemon/internal/dto"
	vector "victord/daemon/internal/entity/vector"

	gomock "github.com/golang/mock/gomock"
)

// MockVectorService is a mock of VectorService interface.
type MockVectorService struct {
	ctrl     *gomock.Controller
	recorder *MockVectorServiceMockRecorder
}

// MockVectorServiceMockRecorder is the mock recorder for MockVectorService.
type MockVectorServiceMockRecorder struct {
	mock *MockVectorService
}

// NewMockVectorService creates a new mock instance.
func NewMockVectorService(ctrl *gomock.Controller) *MockVectorService {
	mock := &MockVectorService{ctrl: ctrl}
	mock.recorder = &MockVectorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVectorService) EXPECT() *MockVectorServiceMockRecorder {
	return m.recorder
}

// DeleteVector mocks base method.
func (m *MockVectorService) DeleteVector(arg0 uint64, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVector", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVector indicates an expected call of DeleteVector.
func (mr *MockVectorServiceMockRecorder) DeleteVector(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVector", reflect.TypeOf((*MockVectorService)(nil).DeleteVector), arg0, arg1)
}

// InsertVector mocks base method.
func (m *MockVectorService) InsertVector(arg0 *dto.InsertVectorRequest, arg1 string) (*uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertVector", arg0, arg1)
	ret0, _ := ret[0].(*uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertVector indicates an expected call of InsertVector.
func (mr *MockVectorServiceMockRecorder) InsertVector(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertVector", reflect.TypeOf((*MockVectorService)(nil).InsertVector), arg0, arg1)
}

// SearchVector mocks base method.
func (m *MockVectorService) SearchVector(arg0 []float32, arg1 string, arg2 int) (*vector.SearchVectorResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchVector", arg0, arg1, arg2)
	ret0, _ := ret[0].(*vector.SearchVectorResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchVector indicates an expected call of SearchVector.
func (mr *MockVectorServiceMockRecorder) SearchVector(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchVector", reflect.TypeOf((*MockVectorService)(nil).SearchVector), arg0, arg1, arg2)
}
